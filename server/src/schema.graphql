scalar DateTime

type Project {
  id: ID!
  createdAt: DateTime!
  description: String!
  name: String!
  addBy: User
  updateAt: DateTime
  tutor: User
  type: Int
  steps: [Step]
  state: Int
  member: [User]
  college: Int
  viewNum: Int
  favoriteUser: [User]
}

type User {
  id: ID!
  name: String!
  idNumber: String!
  password: String!
  addByProjects: [Project]
  memberProjects: [Project]
  type: Int
  favorite: [Project]
  message: [Message]
  follow: [User]
  class: String
  tutorProjects: [Project]
  unreadMessage: [Message]
  readMessage: [Message]
}

type Step {
  id: ID!
  name: String!
  finishTime: DateTime!
  updateAt: DateTime
  charge: User
  state: Int
}

type Message {
  id: ID!
  addBy: User!
  createdAt: DateTime!
  article: String
  unread: [User]
  read: [User]
}

type ProjectList {
  projects: [Project!]!
  myFavoriteProjects: [Project!]!
  count: Int!
}

enum ProjectOrderByInput {
  createdAt_ASC
  createdAt_DESC
  viewNum_ASC
  viewNum_DESC
}

type UserList {
  users: [User!]!
  myFollowUsers: [User!]!
  count: Int!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

type UserHome {
  projectList: [Project!]!
}

type MessageList {
  messages: [Message!]!
  count: Int!
}

enum MessageOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

type AuthPayload {
  token: String
  user: User
}

type Query {
  projectList(filter: String, attribution: Int, skip: Int, first: Int, orderBy: ProjectOrderByInput): ProjectList!
  project(id: String): Project!
  userList(filter: String, skip: Int, first: Int, orderBy: UserOrderByInput): UserList!
  getUserInfo(userId: String): User!
}

type Mutation {
  signup(idNumber: String!, password: String!, name: String!): AuthPayload
  login(idNumber: String!, password: String!): AuthPayload
  collectionProject(projectId: String!): Project
  followUser(followUserId: String!): User
  sendMessage(article: String!, userIdArr: [String!]!): Message
  changeSteps(steps: [String]): Boolean
}

type Subscription {
  updateProject: Project
  newProject: Project
  updateUser: User
}