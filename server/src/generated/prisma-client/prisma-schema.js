module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateMessage {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateStep {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Message {
  id: ID!
  addBy: User!
  createdAt: DateTime!
  article: String
  unread(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  read(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  addBy: UserCreateOneWithoutMessageInput!
  article: String
  unread: UserCreateManyWithoutUnreadMessageInput
  read: UserCreateManyWithoutReadMessageInput
}

input MessageCreateManyWithoutAddByInput {
  create: [MessageCreateWithoutAddByInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutReadInput {
  create: [MessageCreateWithoutReadInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutUnreadInput {
  create: [MessageCreateWithoutUnreadInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutAddByInput {
  article: String
  unread: UserCreateManyWithoutUnreadMessageInput
  read: UserCreateManyWithoutReadMessageInput
}

input MessageCreateWithoutReadInput {
  addBy: UserCreateOneWithoutMessageInput!
  article: String
  unread: UserCreateManyWithoutUnreadMessageInput
}

input MessageCreateWithoutUnreadInput {
  addBy: UserCreateOneWithoutMessageInput!
  article: String
  read: UserCreateManyWithoutReadMessageInput
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  article_ASC
  article_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  article: String
}

input MessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  article: String
  article_not: String
  article_in: [String!]
  article_not_in: [String!]
  article_lt: String
  article_lte: String
  article_gt: String
  article_gte: String
  article_contains: String
  article_not_contains: String
  article_starts_with: String
  article_not_starts_with: String
  article_ends_with: String
  article_not_ends_with: String
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  addBy: UserUpdateOneRequiredWithoutMessageInput
  article: String
  unread: UserUpdateManyWithoutUnreadMessageInput
  read: UserUpdateManyWithoutReadMessageInput
}

input MessageUpdateManyDataInput {
  article: String
}

input MessageUpdateManyMutationInput {
  article: String
}

input MessageUpdateManyWithoutAddByInput {
  create: [MessageCreateWithoutAddByInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutAddByInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutAddByInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithoutReadInput {
  create: [MessageCreateWithoutReadInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutReadInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutReadInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithoutUnreadInput {
  create: [MessageCreateWithoutUnreadInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutUnreadInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutUnreadInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateWithoutAddByDataInput {
  article: String
  unread: UserUpdateManyWithoutUnreadMessageInput
  read: UserUpdateManyWithoutReadMessageInput
}

input MessageUpdateWithoutReadDataInput {
  addBy: UserUpdateOneRequiredWithoutMessageInput
  article: String
  unread: UserUpdateManyWithoutUnreadMessageInput
}

input MessageUpdateWithoutUnreadDataInput {
  addBy: UserUpdateOneRequiredWithoutMessageInput
  article: String
  read: UserUpdateManyWithoutReadMessageInput
}

input MessageUpdateWithWhereUniqueWithoutAddByInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutAddByDataInput!
}

input MessageUpdateWithWhereUniqueWithoutReadInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutReadDataInput!
}

input MessageUpdateWithWhereUniqueWithoutUnreadInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutUnreadDataInput!
}

input MessageUpsertWithWhereUniqueWithoutAddByInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutAddByDataInput!
  create: MessageCreateWithoutAddByInput!
}

input MessageUpsertWithWhereUniqueWithoutReadInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutReadDataInput!
  create: MessageCreateWithoutReadInput!
}

input MessageUpsertWithWhereUniqueWithoutUnreadInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutUnreadDataInput!
  create: MessageCreateWithoutUnreadInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  addBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  article: String
  article_not: String
  article_in: [String!]
  article_not_in: [String!]
  article_lt: String
  article_lte: String
  article_gt: String
  article_gte: String
  article_contains: String
  article_not_contains: String
  article_starts_with: String
  article_not_starts_with: String
  article_ends_with: String
  article_not_ends_with: String
  unread_every: UserWhereInput
  unread_some: UserWhereInput
  unread_none: UserWhereInput
  read_every: UserWhereInput
  read_some: UserWhereInput
  read_none: UserWhereInput
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateManyProjects(data: ProjectUpdateManyMutationInput!, where: ProjectWhereInput): BatchPayload!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  createStep(data: StepCreateInput!): Step!
  updateStep(data: StepUpdateInput!, where: StepWhereUniqueInput!): Step
  updateManySteps(data: StepUpdateManyMutationInput!, where: StepWhereInput): BatchPayload!
  upsertStep(where: StepWhereUniqueInput!, create: StepCreateInput!, update: StepUpdateInput!): Step!
  deleteStep(where: StepWhereUniqueInput!): Step
  deleteManySteps(where: StepWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project {
  id: ID!
  createdAt: DateTime!
  description: String!
  name: String!
  addBy: User
  updateAt: DateTime
  tutor: User
  type: Int
  steps(where: StepWhereInput, orderBy: StepOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Step!]
  state: Int
  member(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  college: Int
  viewNum: Int
  favoriteUser(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type ProjectConnection {
  pageInfo: PageInfo!
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  description: String!
  name: String!
  addBy: UserCreateOneWithoutAddByProjectsInput
  updateAt: DateTime
  tutor: UserCreateOneWithoutTutorProjectsInput
  type: Int
  steps: StepCreateManyInput
  state: Int
  member: UserCreateManyWithoutMemberProjectsInput
  college: Int
  viewNum: Int
  favoriteUser: UserCreateManyWithoutFavoriteInput
}

input ProjectCreateManyWithoutAddByInput {
  create: [ProjectCreateWithoutAddByInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateManyWithoutFavoriteUserInput {
  create: [ProjectCreateWithoutFavoriteUserInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateManyWithoutMemberInput {
  create: [ProjectCreateWithoutMemberInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateManyWithoutTutorInput {
  create: [ProjectCreateWithoutTutorInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutAddByInput {
  description: String!
  name: String!
  updateAt: DateTime
  tutor: UserCreateOneWithoutTutorProjectsInput
  type: Int
  steps: StepCreateManyInput
  state: Int
  member: UserCreateManyWithoutMemberProjectsInput
  college: Int
  viewNum: Int
  favoriteUser: UserCreateManyWithoutFavoriteInput
}

input ProjectCreateWithoutFavoriteUserInput {
  description: String!
  name: String!
  addBy: UserCreateOneWithoutAddByProjectsInput
  updateAt: DateTime
  tutor: UserCreateOneWithoutTutorProjectsInput
  type: Int
  steps: StepCreateManyInput
  state: Int
  member: UserCreateManyWithoutMemberProjectsInput
  college: Int
  viewNum: Int
}

input ProjectCreateWithoutMemberInput {
  description: String!
  name: String!
  addBy: UserCreateOneWithoutAddByProjectsInput
  updateAt: DateTime
  tutor: UserCreateOneWithoutTutorProjectsInput
  type: Int
  steps: StepCreateManyInput
  state: Int
  college: Int
  viewNum: Int
  favoriteUser: UserCreateManyWithoutFavoriteInput
}

input ProjectCreateWithoutTutorInput {
  description: String!
  name: String!
  addBy: UserCreateOneWithoutAddByProjectsInput
  updateAt: DateTime
  type: Int
  steps: StepCreateManyInput
  state: Int
  member: UserCreateManyWithoutMemberProjectsInput
  college: Int
  viewNum: Int
  favoriteUser: UserCreateManyWithoutFavoriteInput
}

type ProjectEdge {
  node: Project!
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  name_ASC
  name_DESC
  updateAt_ASC
  updateAt_DESC
  type_ASC
  type_DESC
  state_ASC
  state_DESC
  college_ASC
  college_DESC
  viewNum_ASC
  viewNum_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String!
  name: String!
  updateAt: DateTime
  type: Int
  state: Int
  college: Int
  viewNum: Int
}

input ProjectScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updateAt: DateTime
  updateAt_not: DateTime
  updateAt_in: [DateTime!]
  updateAt_not_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  type: Int
  type_not: Int
  type_in: [Int!]
  type_not_in: [Int!]
  type_lt: Int
  type_lte: Int
  type_gt: Int
  type_gte: Int
  state: Int
  state_not: Int
  state_in: [Int!]
  state_not_in: [Int!]
  state_lt: Int
  state_lte: Int
  state_gt: Int
  state_gte: Int
  college: Int
  college_not: Int
  college_in: [Int!]
  college_not_in: [Int!]
  college_lt: Int
  college_lte: Int
  college_gt: Int
  college_gte: Int
  viewNum: Int
  viewNum_not: Int
  viewNum_in: [Int!]
  viewNum_not_in: [Int!]
  viewNum_lt: Int
  viewNum_lte: Int
  viewNum_gt: Int
  viewNum_gte: Int
  AND: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
  AND: [ProjectSubscriptionWhereInput!]
  OR: [ProjectSubscriptionWhereInput!]
  NOT: [ProjectSubscriptionWhereInput!]
}

input ProjectUpdateInput {
  description: String
  name: String
  addBy: UserUpdateOneWithoutAddByProjectsInput
  updateAt: DateTime
  tutor: UserUpdateOneWithoutTutorProjectsInput
  type: Int
  steps: StepUpdateManyInput
  state: Int
  member: UserUpdateManyWithoutMemberProjectsInput
  college: Int
  viewNum: Int
  favoriteUser: UserUpdateManyWithoutFavoriteInput
}

input ProjectUpdateManyDataInput {
  description: String
  name: String
  updateAt: DateTime
  type: Int
  state: Int
  college: Int
  viewNum: Int
}

input ProjectUpdateManyMutationInput {
  description: String
  name: String
  updateAt: DateTime
  type: Int
  state: Int
  college: Int
  viewNum: Int
}

input ProjectUpdateManyWithoutAddByInput {
  create: [ProjectCreateWithoutAddByInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutAddByInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutAddByInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithoutFavoriteUserInput {
  create: [ProjectCreateWithoutFavoriteUserInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutFavoriteUserInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutFavoriteUserInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithoutMemberInput {
  create: [ProjectCreateWithoutMemberInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutMemberInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutMemberInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithoutTutorInput {
  create: [ProjectCreateWithoutTutorInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutTutorInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutTutorInput!]
  deleteMany: [ProjectScalarWhereInput!]
  updateMany: [ProjectUpdateManyWithWhereNestedInput!]
}

input ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyDataInput!
}

input ProjectUpdateWithoutAddByDataInput {
  description: String
  name: String
  updateAt: DateTime
  tutor: UserUpdateOneWithoutTutorProjectsInput
  type: Int
  steps: StepUpdateManyInput
  state: Int
  member: UserUpdateManyWithoutMemberProjectsInput
  college: Int
  viewNum: Int
  favoriteUser: UserUpdateManyWithoutFavoriteInput
}

input ProjectUpdateWithoutFavoriteUserDataInput {
  description: String
  name: String
  addBy: UserUpdateOneWithoutAddByProjectsInput
  updateAt: DateTime
  tutor: UserUpdateOneWithoutTutorProjectsInput
  type: Int
  steps: StepUpdateManyInput
  state: Int
  member: UserUpdateManyWithoutMemberProjectsInput
  college: Int
  viewNum: Int
}

input ProjectUpdateWithoutMemberDataInput {
  description: String
  name: String
  addBy: UserUpdateOneWithoutAddByProjectsInput
  updateAt: DateTime
  tutor: UserUpdateOneWithoutTutorProjectsInput
  type: Int
  steps: StepUpdateManyInput
  state: Int
  college: Int
  viewNum: Int
  favoriteUser: UserUpdateManyWithoutFavoriteInput
}

input ProjectUpdateWithoutTutorDataInput {
  description: String
  name: String
  addBy: UserUpdateOneWithoutAddByProjectsInput
  updateAt: DateTime
  type: Int
  steps: StepUpdateManyInput
  state: Int
  member: UserUpdateManyWithoutMemberProjectsInput
  college: Int
  viewNum: Int
  favoriteUser: UserUpdateManyWithoutFavoriteInput
}

input ProjectUpdateWithWhereUniqueWithoutAddByInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutAddByDataInput!
}

input ProjectUpdateWithWhereUniqueWithoutFavoriteUserInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutFavoriteUserDataInput!
}

input ProjectUpdateWithWhereUniqueWithoutMemberInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutMemberDataInput!
}

input ProjectUpdateWithWhereUniqueWithoutTutorInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutTutorDataInput!
}

input ProjectUpsertWithWhereUniqueWithoutAddByInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutAddByDataInput!
  create: ProjectCreateWithoutAddByInput!
}

input ProjectUpsertWithWhereUniqueWithoutFavoriteUserInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutFavoriteUserDataInput!
  create: ProjectCreateWithoutFavoriteUserInput!
}

input ProjectUpsertWithWhereUniqueWithoutMemberInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutMemberDataInput!
  create: ProjectCreateWithoutMemberInput!
}

input ProjectUpsertWithWhereUniqueWithoutTutorInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutTutorDataInput!
  create: ProjectCreateWithoutTutorInput!
}

input ProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  addBy: UserWhereInput
  updateAt: DateTime
  updateAt_not: DateTime
  updateAt_in: [DateTime!]
  updateAt_not_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  tutor: UserWhereInput
  type: Int
  type_not: Int
  type_in: [Int!]
  type_not_in: [Int!]
  type_lt: Int
  type_lte: Int
  type_gt: Int
  type_gte: Int
  steps_every: StepWhereInput
  steps_some: StepWhereInput
  steps_none: StepWhereInput
  state: Int
  state_not: Int
  state_in: [Int!]
  state_not_in: [Int!]
  state_lt: Int
  state_lte: Int
  state_gt: Int
  state_gte: Int
  member_every: UserWhereInput
  member_some: UserWhereInput
  member_none: UserWhereInput
  college: Int
  college_not: Int
  college_in: [Int!]
  college_not_in: [Int!]
  college_lt: Int
  college_lte: Int
  college_gt: Int
  college_gte: Int
  viewNum: Int
  viewNum_not: Int
  viewNum_in: [Int!]
  viewNum_not_in: [Int!]
  viewNum_lt: Int
  viewNum_lte: Int
  viewNum_gt: Int
  viewNum_gte: Int
  favoriteUser_every: UserWhereInput
  favoriteUser_some: UserWhereInput
  favoriteUser_none: UserWhereInput
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  step(where: StepWhereUniqueInput!): Step
  steps(where: StepWhereInput, orderBy: StepOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Step]!
  stepsConnection(where: StepWhereInput, orderBy: StepOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StepConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Step {
  id: ID!
  name: String!
  finishTime: DateTime!
  updateAt: DateTime
  charge: User
  state: Int
}

type StepConnection {
  pageInfo: PageInfo!
  edges: [StepEdge]!
  aggregate: AggregateStep!
}

input StepCreateInput {
  name: String!
  finishTime: DateTime!
  updateAt: DateTime
  charge: UserCreateOneInput
  state: Int
}

input StepCreateManyInput {
  create: [StepCreateInput!]
  connect: [StepWhereUniqueInput!]
}

type StepEdge {
  node: Step!
  cursor: String!
}

enum StepOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  finishTime_ASC
  finishTime_DESC
  updateAt_ASC
  updateAt_DESC
  state_ASC
  state_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StepPreviousValues {
  id: ID!
  name: String!
  finishTime: DateTime!
  updateAt: DateTime
  state: Int
}

input StepScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  finishTime: DateTime
  finishTime_not: DateTime
  finishTime_in: [DateTime!]
  finishTime_not_in: [DateTime!]
  finishTime_lt: DateTime
  finishTime_lte: DateTime
  finishTime_gt: DateTime
  finishTime_gte: DateTime
  updateAt: DateTime
  updateAt_not: DateTime
  updateAt_in: [DateTime!]
  updateAt_not_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  state: Int
  state_not: Int
  state_in: [Int!]
  state_not_in: [Int!]
  state_lt: Int
  state_lte: Int
  state_gt: Int
  state_gte: Int
  AND: [StepScalarWhereInput!]
  OR: [StepScalarWhereInput!]
  NOT: [StepScalarWhereInput!]
}

type StepSubscriptionPayload {
  mutation: MutationType!
  node: Step
  updatedFields: [String!]
  previousValues: StepPreviousValues
}

input StepSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StepWhereInput
  AND: [StepSubscriptionWhereInput!]
  OR: [StepSubscriptionWhereInput!]
  NOT: [StepSubscriptionWhereInput!]
}

input StepUpdateDataInput {
  name: String
  finishTime: DateTime
  updateAt: DateTime
  charge: UserUpdateOneInput
  state: Int
}

input StepUpdateInput {
  name: String
  finishTime: DateTime
  updateAt: DateTime
  charge: UserUpdateOneInput
  state: Int
}

input StepUpdateManyDataInput {
  name: String
  finishTime: DateTime
  updateAt: DateTime
  state: Int
}

input StepUpdateManyInput {
  create: [StepCreateInput!]
  update: [StepUpdateWithWhereUniqueNestedInput!]
  upsert: [StepUpsertWithWhereUniqueNestedInput!]
  delete: [StepWhereUniqueInput!]
  connect: [StepWhereUniqueInput!]
  set: [StepWhereUniqueInput!]
  disconnect: [StepWhereUniqueInput!]
  deleteMany: [StepScalarWhereInput!]
  updateMany: [StepUpdateManyWithWhereNestedInput!]
}

input StepUpdateManyMutationInput {
  name: String
  finishTime: DateTime
  updateAt: DateTime
  state: Int
}

input StepUpdateManyWithWhereNestedInput {
  where: StepScalarWhereInput!
  data: StepUpdateManyDataInput!
}

input StepUpdateWithWhereUniqueNestedInput {
  where: StepWhereUniqueInput!
  data: StepUpdateDataInput!
}

input StepUpsertWithWhereUniqueNestedInput {
  where: StepWhereUniqueInput!
  update: StepUpdateDataInput!
  create: StepCreateInput!
}

input StepWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  finishTime: DateTime
  finishTime_not: DateTime
  finishTime_in: [DateTime!]
  finishTime_not_in: [DateTime!]
  finishTime_lt: DateTime
  finishTime_lte: DateTime
  finishTime_gt: DateTime
  finishTime_gte: DateTime
  updateAt: DateTime
  updateAt_not: DateTime
  updateAt_in: [DateTime!]
  updateAt_not_in: [DateTime!]
  updateAt_lt: DateTime
  updateAt_lte: DateTime
  updateAt_gt: DateTime
  updateAt_gte: DateTime
  charge: UserWhereInput
  state: Int
  state_not: Int
  state_in: [Int!]
  state_not_in: [Int!]
  state_lt: Int
  state_lte: Int
  state_gt: Int
  state_gte: Int
  AND: [StepWhereInput!]
  OR: [StepWhereInput!]
  NOT: [StepWhereInput!]
}

input StepWhereUniqueInput {
  id: ID
}

type Subscription {
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  step(where: StepSubscriptionWhereInput): StepSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  idNumber: String!
  password: String!
  addByProjects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  memberProjects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  type: Int
  favorite(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  message(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  follow(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  class: String
  tutorProjects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  unreadMessage(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  readMessage(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  idNumber: String!
  password: String!
  addByProjects: ProjectCreateManyWithoutAddByInput
  memberProjects: ProjectCreateManyWithoutMemberInput
  type: Int
  favorite: ProjectCreateManyWithoutFavoriteUserInput
  message: MessageCreateManyWithoutAddByInput
  follow: UserCreateManyInput
  class: String
  tutorProjects: ProjectCreateManyWithoutTutorInput
  unreadMessage: MessageCreateManyWithoutUnreadInput
  readMessage: MessageCreateManyWithoutReadInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFavoriteInput {
  create: [UserCreateWithoutFavoriteInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutMemberProjectsInput {
  create: [UserCreateWithoutMemberProjectsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutReadMessageInput {
  create: [UserCreateWithoutReadMessageInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutUnreadMessageInput {
  create: [UserCreateWithoutUnreadMessageInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAddByProjectsInput {
  create: UserCreateWithoutAddByProjectsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMessageInput {
  create: UserCreateWithoutMessageInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTutorProjectsInput {
  create: UserCreateWithoutTutorProjectsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAddByProjectsInput {
  name: String!
  idNumber: String!
  password: String!
  memberProjects: ProjectCreateManyWithoutMemberInput
  type: Int
  favorite: ProjectCreateManyWithoutFavoriteUserInput
  message: MessageCreateManyWithoutAddByInput
  follow: UserCreateManyInput
  class: String
  tutorProjects: ProjectCreateManyWithoutTutorInput
  unreadMessage: MessageCreateManyWithoutUnreadInput
  readMessage: MessageCreateManyWithoutReadInput
}

input UserCreateWithoutFavoriteInput {
  name: String!
  idNumber: String!
  password: String!
  addByProjects: ProjectCreateManyWithoutAddByInput
  memberProjects: ProjectCreateManyWithoutMemberInput
  type: Int
  message: MessageCreateManyWithoutAddByInput
  follow: UserCreateManyInput
  class: String
  tutorProjects: ProjectCreateManyWithoutTutorInput
  unreadMessage: MessageCreateManyWithoutUnreadInput
  readMessage: MessageCreateManyWithoutReadInput
}

input UserCreateWithoutMemberProjectsInput {
  name: String!
  idNumber: String!
  password: String!
  addByProjects: ProjectCreateManyWithoutAddByInput
  type: Int
  favorite: ProjectCreateManyWithoutFavoriteUserInput
  message: MessageCreateManyWithoutAddByInput
  follow: UserCreateManyInput
  class: String
  tutorProjects: ProjectCreateManyWithoutTutorInput
  unreadMessage: MessageCreateManyWithoutUnreadInput
  readMessage: MessageCreateManyWithoutReadInput
}

input UserCreateWithoutMessageInput {
  name: String!
  idNumber: String!
  password: String!
  addByProjects: ProjectCreateManyWithoutAddByInput
  memberProjects: ProjectCreateManyWithoutMemberInput
  type: Int
  favorite: ProjectCreateManyWithoutFavoriteUserInput
  follow: UserCreateManyInput
  class: String
  tutorProjects: ProjectCreateManyWithoutTutorInput
  unreadMessage: MessageCreateManyWithoutUnreadInput
  readMessage: MessageCreateManyWithoutReadInput
}

input UserCreateWithoutReadMessageInput {
  name: String!
  idNumber: String!
  password: String!
  addByProjects: ProjectCreateManyWithoutAddByInput
  memberProjects: ProjectCreateManyWithoutMemberInput
  type: Int
  favorite: ProjectCreateManyWithoutFavoriteUserInput
  message: MessageCreateManyWithoutAddByInput
  follow: UserCreateManyInput
  class: String
  tutorProjects: ProjectCreateManyWithoutTutorInput
  unreadMessage: MessageCreateManyWithoutUnreadInput
}

input UserCreateWithoutTutorProjectsInput {
  name: String!
  idNumber: String!
  password: String!
  addByProjects: ProjectCreateManyWithoutAddByInput
  memberProjects: ProjectCreateManyWithoutMemberInput
  type: Int
  favorite: ProjectCreateManyWithoutFavoriteUserInput
  message: MessageCreateManyWithoutAddByInput
  follow: UserCreateManyInput
  class: String
  unreadMessage: MessageCreateManyWithoutUnreadInput
  readMessage: MessageCreateManyWithoutReadInput
}

input UserCreateWithoutUnreadMessageInput {
  name: String!
  idNumber: String!
  password: String!
  addByProjects: ProjectCreateManyWithoutAddByInput
  memberProjects: ProjectCreateManyWithoutMemberInput
  type: Int
  favorite: ProjectCreateManyWithoutFavoriteUserInput
  message: MessageCreateManyWithoutAddByInput
  follow: UserCreateManyInput
  class: String
  tutorProjects: ProjectCreateManyWithoutTutorInput
  readMessage: MessageCreateManyWithoutReadInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  idNumber_ASC
  idNumber_DESC
  password_ASC
  password_DESC
  type_ASC
  type_DESC
  class_ASC
  class_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  idNumber: String!
  password: String!
  type: Int
  class: String
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  idNumber: String
  idNumber_not: String
  idNumber_in: [String!]
  idNumber_not_in: [String!]
  idNumber_lt: String
  idNumber_lte: String
  idNumber_gt: String
  idNumber_gte: String
  idNumber_contains: String
  idNumber_not_contains: String
  idNumber_starts_with: String
  idNumber_not_starts_with: String
  idNumber_ends_with: String
  idNumber_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  type: Int
  type_not: Int
  type_in: [Int!]
  type_not_in: [Int!]
  type_lt: Int
  type_lte: Int
  type_gt: Int
  type_gte: Int
  class: String
  class_not: String
  class_in: [String!]
  class_not_in: [String!]
  class_lt: String
  class_lte: String
  class_gt: String
  class_gte: String
  class_contains: String
  class_not_contains: String
  class_starts_with: String
  class_not_starts_with: String
  class_ends_with: String
  class_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  idNumber: String
  password: String
  addByProjects: ProjectUpdateManyWithoutAddByInput
  memberProjects: ProjectUpdateManyWithoutMemberInput
  type: Int
  favorite: ProjectUpdateManyWithoutFavoriteUserInput
  message: MessageUpdateManyWithoutAddByInput
  follow: UserUpdateManyInput
  class: String
  tutorProjects: ProjectUpdateManyWithoutTutorInput
  unreadMessage: MessageUpdateManyWithoutUnreadInput
  readMessage: MessageUpdateManyWithoutReadInput
}

input UserUpdateInput {
  name: String
  idNumber: String
  password: String
  addByProjects: ProjectUpdateManyWithoutAddByInput
  memberProjects: ProjectUpdateManyWithoutMemberInput
  type: Int
  favorite: ProjectUpdateManyWithoutFavoriteUserInput
  message: MessageUpdateManyWithoutAddByInput
  follow: UserUpdateManyInput
  class: String
  tutorProjects: ProjectUpdateManyWithoutTutorInput
  unreadMessage: MessageUpdateManyWithoutUnreadInput
  readMessage: MessageUpdateManyWithoutReadInput
}

input UserUpdateManyDataInput {
  name: String
  idNumber: String
  password: String
  type: Int
  class: String
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  name: String
  idNumber: String
  password: String
  type: Int
  class: String
}

input UserUpdateManyWithoutFavoriteInput {
  create: [UserCreateWithoutFavoriteInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFavoriteInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFavoriteInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutMemberProjectsInput {
  create: [UserCreateWithoutMemberProjectsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutMemberProjectsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutMemberProjectsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutReadMessageInput {
  create: [UserCreateWithoutReadMessageInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutReadMessageInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutReadMessageInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutUnreadMessageInput {
  create: [UserCreateWithoutUnreadMessageInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutUnreadMessageInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutUnreadMessageInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutMessageInput {
  create: UserCreateWithoutMessageInput
  update: UserUpdateWithoutMessageDataInput
  upsert: UserUpsertWithoutMessageInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutAddByProjectsInput {
  create: UserCreateWithoutAddByProjectsInput
  update: UserUpdateWithoutAddByProjectsDataInput
  upsert: UserUpsertWithoutAddByProjectsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutTutorProjectsInput {
  create: UserCreateWithoutTutorProjectsInput
  update: UserUpdateWithoutTutorProjectsDataInput
  upsert: UserUpsertWithoutTutorProjectsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAddByProjectsDataInput {
  name: String
  idNumber: String
  password: String
  memberProjects: ProjectUpdateManyWithoutMemberInput
  type: Int
  favorite: ProjectUpdateManyWithoutFavoriteUserInput
  message: MessageUpdateManyWithoutAddByInput
  follow: UserUpdateManyInput
  class: String
  tutorProjects: ProjectUpdateManyWithoutTutorInput
  unreadMessage: MessageUpdateManyWithoutUnreadInput
  readMessage: MessageUpdateManyWithoutReadInput
}

input UserUpdateWithoutFavoriteDataInput {
  name: String
  idNumber: String
  password: String
  addByProjects: ProjectUpdateManyWithoutAddByInput
  memberProjects: ProjectUpdateManyWithoutMemberInput
  type: Int
  message: MessageUpdateManyWithoutAddByInput
  follow: UserUpdateManyInput
  class: String
  tutorProjects: ProjectUpdateManyWithoutTutorInput
  unreadMessage: MessageUpdateManyWithoutUnreadInput
  readMessage: MessageUpdateManyWithoutReadInput
}

input UserUpdateWithoutMemberProjectsDataInput {
  name: String
  idNumber: String
  password: String
  addByProjects: ProjectUpdateManyWithoutAddByInput
  type: Int
  favorite: ProjectUpdateManyWithoutFavoriteUserInput
  message: MessageUpdateManyWithoutAddByInput
  follow: UserUpdateManyInput
  class: String
  tutorProjects: ProjectUpdateManyWithoutTutorInput
  unreadMessage: MessageUpdateManyWithoutUnreadInput
  readMessage: MessageUpdateManyWithoutReadInput
}

input UserUpdateWithoutMessageDataInput {
  name: String
  idNumber: String
  password: String
  addByProjects: ProjectUpdateManyWithoutAddByInput
  memberProjects: ProjectUpdateManyWithoutMemberInput
  type: Int
  favorite: ProjectUpdateManyWithoutFavoriteUserInput
  follow: UserUpdateManyInput
  class: String
  tutorProjects: ProjectUpdateManyWithoutTutorInput
  unreadMessage: MessageUpdateManyWithoutUnreadInput
  readMessage: MessageUpdateManyWithoutReadInput
}

input UserUpdateWithoutReadMessageDataInput {
  name: String
  idNumber: String
  password: String
  addByProjects: ProjectUpdateManyWithoutAddByInput
  memberProjects: ProjectUpdateManyWithoutMemberInput
  type: Int
  favorite: ProjectUpdateManyWithoutFavoriteUserInput
  message: MessageUpdateManyWithoutAddByInput
  follow: UserUpdateManyInput
  class: String
  tutorProjects: ProjectUpdateManyWithoutTutorInput
  unreadMessage: MessageUpdateManyWithoutUnreadInput
}

input UserUpdateWithoutTutorProjectsDataInput {
  name: String
  idNumber: String
  password: String
  addByProjects: ProjectUpdateManyWithoutAddByInput
  memberProjects: ProjectUpdateManyWithoutMemberInput
  type: Int
  favorite: ProjectUpdateManyWithoutFavoriteUserInput
  message: MessageUpdateManyWithoutAddByInput
  follow: UserUpdateManyInput
  class: String
  unreadMessage: MessageUpdateManyWithoutUnreadInput
  readMessage: MessageUpdateManyWithoutReadInput
}

input UserUpdateWithoutUnreadMessageDataInput {
  name: String
  idNumber: String
  password: String
  addByProjects: ProjectUpdateManyWithoutAddByInput
  memberProjects: ProjectUpdateManyWithoutMemberInput
  type: Int
  favorite: ProjectUpdateManyWithoutFavoriteUserInput
  message: MessageUpdateManyWithoutAddByInput
  follow: UserUpdateManyInput
  class: String
  tutorProjects: ProjectUpdateManyWithoutTutorInput
  readMessage: MessageUpdateManyWithoutReadInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateWithWhereUniqueWithoutFavoriteInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFavoriteDataInput!
}

input UserUpdateWithWhereUniqueWithoutMemberProjectsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutMemberProjectsDataInput!
}

input UserUpdateWithWhereUniqueWithoutReadMessageInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutReadMessageDataInput!
}

input UserUpdateWithWhereUniqueWithoutUnreadMessageInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutUnreadMessageDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutAddByProjectsInput {
  update: UserUpdateWithoutAddByProjectsDataInput!
  create: UserCreateWithoutAddByProjectsInput!
}

input UserUpsertWithoutMessageInput {
  update: UserUpdateWithoutMessageDataInput!
  create: UserCreateWithoutMessageInput!
}

input UserUpsertWithoutTutorProjectsInput {
  update: UserUpdateWithoutTutorProjectsDataInput!
  create: UserCreateWithoutTutorProjectsInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutFavoriteInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFavoriteDataInput!
  create: UserCreateWithoutFavoriteInput!
}

input UserUpsertWithWhereUniqueWithoutMemberProjectsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutMemberProjectsDataInput!
  create: UserCreateWithoutMemberProjectsInput!
}

input UserUpsertWithWhereUniqueWithoutReadMessageInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutReadMessageDataInput!
  create: UserCreateWithoutReadMessageInput!
}

input UserUpsertWithWhereUniqueWithoutUnreadMessageInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutUnreadMessageDataInput!
  create: UserCreateWithoutUnreadMessageInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  idNumber: String
  idNumber_not: String
  idNumber_in: [String!]
  idNumber_not_in: [String!]
  idNumber_lt: String
  idNumber_lte: String
  idNumber_gt: String
  idNumber_gte: String
  idNumber_contains: String
  idNumber_not_contains: String
  idNumber_starts_with: String
  idNumber_not_starts_with: String
  idNumber_ends_with: String
  idNumber_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  addByProjects_every: ProjectWhereInput
  addByProjects_some: ProjectWhereInput
  addByProjects_none: ProjectWhereInput
  memberProjects_every: ProjectWhereInput
  memberProjects_some: ProjectWhereInput
  memberProjects_none: ProjectWhereInput
  type: Int
  type_not: Int
  type_in: [Int!]
  type_not_in: [Int!]
  type_lt: Int
  type_lte: Int
  type_gt: Int
  type_gte: Int
  favorite_every: ProjectWhereInput
  favorite_some: ProjectWhereInput
  favorite_none: ProjectWhereInput
  message_every: MessageWhereInput
  message_some: MessageWhereInput
  message_none: MessageWhereInput
  follow_every: UserWhereInput
  follow_some: UserWhereInput
  follow_none: UserWhereInput
  class: String
  class_not: String
  class_in: [String!]
  class_not_in: [String!]
  class_lt: String
  class_lte: String
  class_gt: String
  class_gte: String
  class_contains: String
  class_not_contains: String
  class_starts_with: String
  class_not_starts_with: String
  class_ends_with: String
  class_not_ends_with: String
  tutorProjects_every: ProjectWhereInput
  tutorProjects_some: ProjectWhereInput
  tutorProjects_none: ProjectWhereInput
  unreadMessage_every: MessageWhereInput
  unreadMessage_some: MessageWhereInput
  unreadMessage_none: MessageWhereInput
  readMessage_every: MessageWhereInput
  readMessage_some: MessageWhereInput
  readMessage_none: MessageWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
}
`
      }
    