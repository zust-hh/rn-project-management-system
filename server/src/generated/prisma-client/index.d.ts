// Code generated by Prisma (prisma@1.29.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  message: (where?: MessageWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
  step: (where?: StepWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  message: (where: MessageWhereUniqueInput) => MessagePromise;
  messages: (
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Message>;
  messagesConnection: (
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MessageConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectPromise;
  projects: (
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Project>;
  projectsConnection: (
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ProjectConnectionPromise;
  step: (where: StepWhereUniqueInput) => StepPromise;
  steps: (
    args?: {
      where?: StepWhereInput;
      orderBy?: StepOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Step>;
  stepsConnection: (
    args?: {
      where?: StepWhereInput;
      orderBy?: StepOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => StepConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (
    args: { data: MessageUpdateInput; where: MessageWhereUniqueInput }
  ) => MessagePromise;
  updateManyMessages: (
    args: { data: MessageUpdateManyMutationInput; where?: MessageWhereInput }
  ) => BatchPayloadPromise;
  upsertMessage: (
    args: {
      where: MessageWhereUniqueInput;
      create: MessageCreateInput;
      update: MessageUpdateInput;
    }
  ) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (
    args: { data: ProjectUpdateInput; where: ProjectWhereUniqueInput }
  ) => ProjectPromise;
  updateManyProjects: (
    args: { data: ProjectUpdateManyMutationInput; where?: ProjectWhereInput }
  ) => BatchPayloadPromise;
  upsertProject: (
    args: {
      where: ProjectWhereUniqueInput;
      create: ProjectCreateInput;
      update: ProjectUpdateInput;
    }
  ) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;
  createStep: (data: StepCreateInput) => StepPromise;
  updateStep: (
    args: { data: StepUpdateInput; where: StepWhereUniqueInput }
  ) => StepPromise;
  updateManySteps: (
    args: { data: StepUpdateManyMutationInput; where?: StepWhereInput }
  ) => BatchPayloadPromise;
  upsertStep: (
    args: {
      where: StepWhereUniqueInput;
      create: StepCreateInput;
      update: StepUpdateInput;
    }
  ) => StepPromise;
  deleteStep: (where: StepWhereUniqueInput) => StepPromise;
  deleteManySteps: (where?: StepWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
  step: (
    where?: StepSubscriptionWhereInput
  ) => StepSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ProjectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updateAt_ASC"
  | "updateAt_DESC"
  | "type_ASC"
  | "type_DESC"
  | "state_ASC"
  | "state_DESC"
  | "college_ASC"
  | "college_DESC"
  | "viewNum_ASC"
  | "viewNum_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type StepOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "finishTime_ASC"
  | "finishTime_DESC"
  | "updateAt_ASC"
  | "updateAt_DESC"
  | "state_ASC"
  | "state_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "idNumber_ASC"
  | "idNumber_DESC"
  | "password_ASC"
  | "password_DESC"
  | "type_ASC"
  | "type_DESC"
  | "class_ASC"
  | "class_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "article_ASC"
  | "article_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ProjectUpdateWithoutFavoriteUserDataInput {
  description?: String;
  name?: String;
  addBy?: UserUpdateOneWithoutAddByProjectsInput;
  updateAt?: DateTimeInput;
  tutor?: UserUpdateOneWithoutTutorProjectsInput;
  type?: Int;
  steps?: StepUpdateManyInput;
  state?: Int;
  member?: UserUpdateManyWithoutMemberProjectsInput;
  college?: Int;
  viewNum?: Int;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface StepUpdateDataInput {
  name?: String;
  finishTime?: DateTimeInput;
  updateAt?: DateTimeInput;
  charge?: UserUpdateOneInput;
  state?: Int;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  idNumber?: String;
  idNumber_not?: String;
  idNumber_in?: String[] | String;
  idNumber_not_in?: String[] | String;
  idNumber_lt?: String;
  idNumber_lte?: String;
  idNumber_gt?: String;
  idNumber_gte?: String;
  idNumber_contains?: String;
  idNumber_not_contains?: String;
  idNumber_starts_with?: String;
  idNumber_not_starts_with?: String;
  idNumber_ends_with?: String;
  idNumber_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  addByProjects_every?: ProjectWhereInput;
  addByProjects_some?: ProjectWhereInput;
  addByProjects_none?: ProjectWhereInput;
  memberProjects_every?: ProjectWhereInput;
  memberProjects_some?: ProjectWhereInput;
  memberProjects_none?: ProjectWhereInput;
  type?: Int;
  type_not?: Int;
  type_in?: Int[] | Int;
  type_not_in?: Int[] | Int;
  type_lt?: Int;
  type_lte?: Int;
  type_gt?: Int;
  type_gte?: Int;
  favorite_every?: ProjectWhereInput;
  favorite_some?: ProjectWhereInput;
  favorite_none?: ProjectWhereInput;
  message_every?: MessageWhereInput;
  message_some?: MessageWhereInput;
  message_none?: MessageWhereInput;
  follow_every?: UserWhereInput;
  follow_some?: UserWhereInput;
  follow_none?: UserWhereInput;
  class?: String;
  class_not?: String;
  class_in?: String[] | String;
  class_not_in?: String[] | String;
  class_lt?: String;
  class_lte?: String;
  class_gt?: String;
  class_gte?: String;
  class_contains?: String;
  class_not_contains?: String;
  class_starts_with?: String;
  class_not_starts_with?: String;
  class_ends_with?: String;
  class_not_ends_with?: String;
  tutorProjects_every?: ProjectWhereInput;
  tutorProjects_some?: ProjectWhereInput;
  tutorProjects_none?: ProjectWhereInput;
  unreadMessage_every?: MessageWhereInput;
  unreadMessage_some?: MessageWhereInput;
  unreadMessage_none?: MessageWhereInput;
  readMessage_every?: MessageWhereInput;
  readMessage_some?: MessageWhereInput;
  readMessage_none?: MessageWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface MessageWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  addBy?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  article?: String;
  article_not?: String;
  article_in?: String[] | String;
  article_not_in?: String[] | String;
  article_lt?: String;
  article_lte?: String;
  article_gt?: String;
  article_gte?: String;
  article_contains?: String;
  article_not_contains?: String;
  article_starts_with?: String;
  article_not_starts_with?: String;
  article_ends_with?: String;
  article_not_ends_with?: String;
  unread_every?: UserWhereInput;
  unread_some?: UserWhereInput;
  unread_none?: UserWhereInput;
  read_every?: UserWhereInput;
  read_some?: UserWhereInput;
  read_none?: UserWhereInput;
  AND?: MessageWhereInput[] | MessageWhereInput;
  OR?: MessageWhereInput[] | MessageWhereInput;
  NOT?: MessageWhereInput[] | MessageWhereInput;
}

export interface ProjectUpdateWithoutAddByDataInput {
  description?: String;
  name?: String;
  updateAt?: DateTimeInput;
  tutor?: UserUpdateOneWithoutTutorProjectsInput;
  type?: Int;
  steps?: StepUpdateManyInput;
  state?: Int;
  member?: UserUpdateManyWithoutMemberProjectsInput;
  college?: Int;
  viewNum?: Int;
  favoriteUser?: UserUpdateManyWithoutFavoriteInput;
}

export interface StepScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  finishTime?: DateTimeInput;
  finishTime_not?: DateTimeInput;
  finishTime_in?: DateTimeInput[] | DateTimeInput;
  finishTime_not_in?: DateTimeInput[] | DateTimeInput;
  finishTime_lt?: DateTimeInput;
  finishTime_lte?: DateTimeInput;
  finishTime_gt?: DateTimeInput;
  finishTime_gte?: DateTimeInput;
  updateAt?: DateTimeInput;
  updateAt_not?: DateTimeInput;
  updateAt_in?: DateTimeInput[] | DateTimeInput;
  updateAt_not_in?: DateTimeInput[] | DateTimeInput;
  updateAt_lt?: DateTimeInput;
  updateAt_lte?: DateTimeInput;
  updateAt_gt?: DateTimeInput;
  updateAt_gte?: DateTimeInput;
  state?: Int;
  state_not?: Int;
  state_in?: Int[] | Int;
  state_not_in?: Int[] | Int;
  state_lt?: Int;
  state_lte?: Int;
  state_gt?: Int;
  state_gte?: Int;
  AND?: StepScalarWhereInput[] | StepScalarWhereInput;
  OR?: StepScalarWhereInput[] | StepScalarWhereInput;
  NOT?: StepScalarWhereInput[] | StepScalarWhereInput;
}

export interface UserUpdateOneWithoutTutorProjectsInput {
  create?: UserCreateWithoutTutorProjectsInput;
  update?: UserUpdateWithoutTutorProjectsDataInput;
  upsert?: UserUpsertWithoutTutorProjectsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateDataInput {
  name?: String;
  idNumber?: String;
  password?: String;
  addByProjects?: ProjectUpdateManyWithoutAddByInput;
  memberProjects?: ProjectUpdateManyWithoutMemberInput;
  type?: Int;
  favorite?: ProjectUpdateManyWithoutFavoriteUserInput;
  message?: MessageUpdateManyWithoutAddByInput;
  follow?: UserUpdateManyInput;
  class?: String;
  tutorProjects?: ProjectUpdateManyWithoutTutorInput;
  unreadMessage?: MessageUpdateManyWithoutUnreadInput;
  readMessage?: MessageUpdateManyWithoutReadInput;
}

export interface UserUpdateWithoutTutorProjectsDataInput {
  name?: String;
  idNumber?: String;
  password?: String;
  addByProjects?: ProjectUpdateManyWithoutAddByInput;
  memberProjects?: ProjectUpdateManyWithoutMemberInput;
  type?: Int;
  favorite?: ProjectUpdateManyWithoutFavoriteUserInput;
  message?: MessageUpdateManyWithoutAddByInput;
  follow?: UserUpdateManyInput;
  class?: String;
  unreadMessage?: MessageUpdateManyWithoutUnreadInput;
  readMessage?: MessageUpdateManyWithoutReadInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ProjectUpdateManyWithoutMemberInput {
  create?: ProjectCreateWithoutMemberInput[] | ProjectCreateWithoutMemberInput;
  delete?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  set?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  disconnect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  update?:
    | ProjectUpdateWithWhereUniqueWithoutMemberInput[]
    | ProjectUpdateWithWhereUniqueWithoutMemberInput;
  upsert?:
    | ProjectUpsertWithWhereUniqueWithoutMemberInput[]
    | ProjectUpsertWithWhereUniqueWithoutMemberInput;
  deleteMany?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
  updateMany?:
    | ProjectUpdateManyWithWhereNestedInput[]
    | ProjectUpdateManyWithWhereNestedInput;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProjectWhereInput;
  AND?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
  OR?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
  NOT?: ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput;
}

export interface ProjectUpdateWithWhereUniqueWithoutMemberInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutMemberDataInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  idNumber?: String;
  password?: String;
  type?: Int;
  class?: String;
}

export interface ProjectUpdateWithoutMemberDataInput {
  description?: String;
  name?: String;
  addBy?: UserUpdateOneWithoutAddByProjectsInput;
  updateAt?: DateTimeInput;
  tutor?: UserUpdateOneWithoutTutorProjectsInput;
  type?: Int;
  steps?: StepUpdateManyInput;
  state?: Int;
  college?: Int;
  viewNum?: Int;
  favoriteUser?: UserUpdateManyWithoutFavoriteInput;
}

export interface StepUpdateManyMutationInput {
  name?: String;
  finishTime?: DateTimeInput;
  updateAt?: DateTimeInput;
  state?: Int;
}

export interface UserUpdateOneWithoutAddByProjectsInput {
  create?: UserCreateWithoutAddByProjectsInput;
  update?: UserUpdateWithoutAddByProjectsDataInput;
  upsert?: UserUpsertWithoutAddByProjectsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export type ProjectWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateWithoutAddByProjectsDataInput {
  name?: String;
  idNumber?: String;
  password?: String;
  memberProjects?: ProjectUpdateManyWithoutMemberInput;
  type?: Int;
  favorite?: ProjectUpdateManyWithoutFavoriteUserInput;
  message?: MessageUpdateManyWithoutAddByInput;
  follow?: UserUpdateManyInput;
  class?: String;
  tutorProjects?: ProjectUpdateManyWithoutTutorInput;
  unreadMessage?: MessageUpdateManyWithoutUnreadInput;
  readMessage?: MessageUpdateManyWithoutReadInput;
}

export interface ProjectUpdateInput {
  description?: String;
  name?: String;
  addBy?: UserUpdateOneWithoutAddByProjectsInput;
  updateAt?: DateTimeInput;
  tutor?: UserUpdateOneWithoutTutorProjectsInput;
  type?: Int;
  steps?: StepUpdateManyInput;
  state?: Int;
  member?: UserUpdateManyWithoutMemberProjectsInput;
  college?: Int;
  viewNum?: Int;
  favoriteUser?: UserUpdateManyWithoutFavoriteInput;
}

export interface ProjectUpdateManyWithoutFavoriteUserInput {
  create?:
    | ProjectCreateWithoutFavoriteUserInput[]
    | ProjectCreateWithoutFavoriteUserInput;
  delete?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  set?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  disconnect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  update?:
    | ProjectUpdateWithWhereUniqueWithoutFavoriteUserInput[]
    | ProjectUpdateWithWhereUniqueWithoutFavoriteUserInput;
  upsert?:
    | ProjectUpsertWithWhereUniqueWithoutFavoriteUserInput[]
    | ProjectUpsertWithWhereUniqueWithoutFavoriteUserInput;
  deleteMany?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
  updateMany?:
    | ProjectUpdateManyWithWhereNestedInput[]
    | ProjectUpdateManyWithWhereNestedInput;
}

export type StepWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ProjectUpdateWithWhereUniqueWithoutFavoriteUserInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutFavoriteUserDataInput;
}

export interface UserUpsertWithoutMessageInput {
  update: UserUpdateWithoutMessageDataInput;
  create: UserCreateWithoutMessageInput;
}

export interface ProjectUpsertWithWhereUniqueWithoutFavoriteUserInput {
  where: ProjectWhereUniqueInput;
  update: ProjectUpdateWithoutFavoriteUserDataInput;
  create: ProjectCreateWithoutFavoriteUserInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface StepUpdateManyInput {
  create?: StepCreateInput[] | StepCreateInput;
  update?:
    | StepUpdateWithWhereUniqueNestedInput[]
    | StepUpdateWithWhereUniqueNestedInput;
  upsert?:
    | StepUpsertWithWhereUniqueNestedInput[]
    | StepUpsertWithWhereUniqueNestedInput;
  delete?: StepWhereUniqueInput[] | StepWhereUniqueInput;
  connect?: StepWhereUniqueInput[] | StepWhereUniqueInput;
  set?: StepWhereUniqueInput[] | StepWhereUniqueInput;
  disconnect?: StepWhereUniqueInput[] | StepWhereUniqueInput;
  deleteMany?: StepScalarWhereInput[] | StepScalarWhereInput;
  updateMany?:
    | StepUpdateManyWithWhereNestedInput[]
    | StepUpdateManyWithWhereNestedInput;
}

export interface ProjectUpsertWithWhereUniqueWithoutMemberInput {
  where: ProjectWhereUniqueInput;
  update: ProjectUpdateWithoutMemberDataInput;
  create: ProjectCreateWithoutMemberInput;
}

export interface StepUpdateWithWhereUniqueNestedInput {
  where: StepWhereUniqueInput;
  data: StepUpdateDataInput;
}

export interface UserCreateOneWithoutMessageInput {
  create?: UserCreateWithoutMessageInput;
  connect?: UserWhereUniqueInput;
}

export interface StepUpdateManyDataInput {
  name?: String;
  finishTime?: DateTimeInput;
  updateAt?: DateTimeInput;
  state?: Int;
}

export interface ProjectCreateManyWithoutAddByInput {
  create?: ProjectCreateWithoutAddByInput[] | ProjectCreateWithoutAddByInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
}

export interface StepWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  finishTime?: DateTimeInput;
  finishTime_not?: DateTimeInput;
  finishTime_in?: DateTimeInput[] | DateTimeInput;
  finishTime_not_in?: DateTimeInput[] | DateTimeInput;
  finishTime_lt?: DateTimeInput;
  finishTime_lte?: DateTimeInput;
  finishTime_gt?: DateTimeInput;
  finishTime_gte?: DateTimeInput;
  updateAt?: DateTimeInput;
  updateAt_not?: DateTimeInput;
  updateAt_in?: DateTimeInput[] | DateTimeInput;
  updateAt_not_in?: DateTimeInput[] | DateTimeInput;
  updateAt_lt?: DateTimeInput;
  updateAt_lte?: DateTimeInput;
  updateAt_gt?: DateTimeInput;
  updateAt_gte?: DateTimeInput;
  charge?: UserWhereInput;
  state?: Int;
  state_not?: Int;
  state_in?: Int[] | Int;
  state_not_in?: Int[] | Int;
  state_lt?: Int;
  state_lte?: Int;
  state_gt?: Int;
  state_gte?: Int;
  AND?: StepWhereInput[] | StepWhereInput;
  OR?: StepWhereInput[] | StepWhereInput;
  NOT?: StepWhereInput[] | StepWhereInput;
}

export interface UserCreateOneWithoutTutorProjectsInput {
  create?: UserCreateWithoutTutorProjectsInput;
  connect?: UserWhereUniqueInput;
}

export interface StepUpdateManyWithWhereNestedInput {
  where: StepScalarWhereInput;
  data: StepUpdateManyDataInput;
}

export interface ProjectCreateManyWithoutMemberInput {
  create?: ProjectCreateWithoutMemberInput[] | ProjectCreateWithoutMemberInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
}

export interface MessageUpdateManyWithoutAddByInput {
  create?: MessageCreateWithoutAddByInput[] | MessageCreateWithoutAddByInput;
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  set?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  update?:
    | MessageUpdateWithWhereUniqueWithoutAddByInput[]
    | MessageUpdateWithWhereUniqueWithoutAddByInput;
  upsert?:
    | MessageUpsertWithWhereUniqueWithoutAddByInput[]
    | MessageUpsertWithWhereUniqueWithoutAddByInput;
  deleteMany?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  updateMany?:
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput;
}

export interface UserCreateOneWithoutAddByProjectsInput {
  create?: UserCreateWithoutAddByProjectsInput;
  connect?: UserWhereUniqueInput;
}

export interface MessageUpdateWithWhereUniqueWithoutAddByInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutAddByDataInput;
}

export interface ProjectCreateManyWithoutFavoriteUserInput {
  create?:
    | ProjectCreateWithoutFavoriteUserInput[]
    | ProjectCreateWithoutFavoriteUserInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
}

export interface MessageUpdateWithoutAddByDataInput {
  article?: String;
  unread?: UserUpdateManyWithoutUnreadMessageInput;
  read?: UserUpdateManyWithoutReadMessageInput;
}

export interface StepCreateManyInput {
  create?: StepCreateInput[] | StepCreateInput;
  connect?: StepWhereUniqueInput[] | StepWhereUniqueInput;
}

export interface UserUpdateManyWithoutUnreadMessageInput {
  create?:
    | UserCreateWithoutUnreadMessageInput[]
    | UserCreateWithoutUnreadMessageInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutUnreadMessageInput[]
    | UserUpdateWithWhereUniqueWithoutUnreadMessageInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutUnreadMessageInput[]
    | UserUpsertWithWhereUniqueWithoutUnreadMessageInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithWhereUniqueWithoutUnreadMessageInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutUnreadMessageDataInput;
}

export interface MessageCreateManyWithoutAddByInput {
  create?: MessageCreateWithoutAddByInput[] | MessageCreateWithoutAddByInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
}

export interface UserUpdateWithoutUnreadMessageDataInput {
  name?: String;
  idNumber?: String;
  password?: String;
  addByProjects?: ProjectUpdateManyWithoutAddByInput;
  memberProjects?: ProjectUpdateManyWithoutMemberInput;
  type?: Int;
  favorite?: ProjectUpdateManyWithoutFavoriteUserInput;
  message?: MessageUpdateManyWithoutAddByInput;
  follow?: UserUpdateManyInput;
  class?: String;
  tutorProjects?: ProjectUpdateManyWithoutTutorInput;
  readMessage?: MessageUpdateManyWithoutReadInput;
}

export interface UserCreateManyWithoutUnreadMessageInput {
  create?:
    | UserCreateWithoutUnreadMessageInput[]
    | UserCreateWithoutUnreadMessageInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserUpdateManyInput {
  create?: UserCreateInput[] | UserCreateInput;
  update?:
    | UserUpdateWithWhereUniqueNestedInput[]
    | UserUpdateWithWhereUniqueNestedInput;
  upsert?:
    | UserUpsertWithWhereUniqueNestedInput[]
    | UserUpsertWithWhereUniqueNestedInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserCreateManyInput {
  create?: UserCreateInput[] | UserCreateInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface ProjectCreateWithoutTutorInput {
  description: String;
  name: String;
  addBy?: UserCreateOneWithoutAddByProjectsInput;
  updateAt?: DateTimeInput;
  type?: Int;
  steps?: StepCreateManyInput;
  state?: Int;
  member?: UserCreateManyWithoutMemberProjectsInput;
  college?: Int;
  viewNum?: Int;
  favoriteUser?: UserCreateManyWithoutFavoriteInput;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserCreateWithoutMemberProjectsInput {
  name: String;
  idNumber: String;
  password: String;
  addByProjects?: ProjectCreateManyWithoutAddByInput;
  type?: Int;
  favorite?: ProjectCreateManyWithoutFavoriteUserInput;
  message?: MessageCreateManyWithoutAddByInput;
  follow?: UserCreateManyInput;
  class?: String;
  tutorProjects?: ProjectCreateManyWithoutTutorInput;
  unreadMessage?: MessageCreateManyWithoutUnreadInput;
  readMessage?: MessageCreateManyWithoutReadInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  idNumber?: String;
  idNumber_not?: String;
  idNumber_in?: String[] | String;
  idNumber_not_in?: String[] | String;
  idNumber_lt?: String;
  idNumber_lte?: String;
  idNumber_gt?: String;
  idNumber_gte?: String;
  idNumber_contains?: String;
  idNumber_not_contains?: String;
  idNumber_starts_with?: String;
  idNumber_not_starts_with?: String;
  idNumber_ends_with?: String;
  idNumber_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  type?: Int;
  type_not?: Int;
  type_in?: Int[] | Int;
  type_not_in?: Int[] | Int;
  type_lt?: Int;
  type_lte?: Int;
  type_gt?: Int;
  type_gte?: Int;
  class?: String;
  class_not?: String;
  class_in?: String[] | String;
  class_not_in?: String[] | String;
  class_lt?: String;
  class_lte?: String;
  class_gt?: String;
  class_gte?: String;
  class_contains?: String;
  class_not_contains?: String;
  class_starts_with?: String;
  class_not_starts_with?: String;
  class_ends_with?: String;
  class_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface MessageCreateWithoutUnreadInput {
  addBy: UserCreateOneWithoutMessageInput;
  article?: String;
  read?: UserCreateManyWithoutReadMessageInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserCreateWithoutReadMessageInput {
  name: String;
  idNumber: String;
  password: String;
  addByProjects?: ProjectCreateManyWithoutAddByInput;
  memberProjects?: ProjectCreateManyWithoutMemberInput;
  type?: Int;
  favorite?: ProjectCreateManyWithoutFavoriteUserInput;
  message?: MessageCreateManyWithoutAddByInput;
  follow?: UserCreateManyInput;
  class?: String;
  tutorProjects?: ProjectCreateManyWithoutTutorInput;
  unreadMessage?: MessageCreateManyWithoutUnreadInput;
}

export interface UserUpdateManyDataInput {
  name?: String;
  idNumber?: String;
  password?: String;
  type?: Int;
  class?: String;
}

export interface MessageCreateWithoutReadInput {
  addBy: UserCreateOneWithoutMessageInput;
  article?: String;
  unread?: UserCreateManyWithoutUnreadMessageInput;
}

export interface ProjectUpdateManyWithoutTutorInput {
  create?: ProjectCreateWithoutTutorInput[] | ProjectCreateWithoutTutorInput;
  delete?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  set?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  disconnect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  update?:
    | ProjectUpdateWithWhereUniqueWithoutTutorInput[]
    | ProjectUpdateWithWhereUniqueWithoutTutorInput;
  upsert?:
    | ProjectUpsertWithWhereUniqueWithoutTutorInput[]
    | ProjectUpsertWithWhereUniqueWithoutTutorInput;
  deleteMany?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
  updateMany?:
    | ProjectUpdateManyWithWhereNestedInput[]
    | ProjectUpdateManyWithWhereNestedInput;
}

export interface UserCreateWithoutFavoriteInput {
  name: String;
  idNumber: String;
  password: String;
  addByProjects?: ProjectCreateManyWithoutAddByInput;
  memberProjects?: ProjectCreateManyWithoutMemberInput;
  type?: Int;
  message?: MessageCreateManyWithoutAddByInput;
  follow?: UserCreateManyInput;
  class?: String;
  tutorProjects?: ProjectCreateManyWithoutTutorInput;
  unreadMessage?: MessageCreateManyWithoutUnreadInput;
  readMessage?: MessageCreateManyWithoutReadInput;
}

export interface ProjectUpdateWithWhereUniqueWithoutTutorInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutTutorDataInput;
}

export interface UserUpdateOneRequiredWithoutMessageInput {
  create?: UserCreateWithoutMessageInput;
  update?: UserUpdateWithoutMessageDataInput;
  upsert?: UserUpsertWithoutMessageInput;
  connect?: UserWhereUniqueInput;
}

export interface ProjectUpdateWithoutTutorDataInput {
  description?: String;
  name?: String;
  addBy?: UserUpdateOneWithoutAddByProjectsInput;
  updateAt?: DateTimeInput;
  type?: Int;
  steps?: StepUpdateManyInput;
  state?: Int;
  member?: UserUpdateManyWithoutMemberProjectsInput;
  college?: Int;
  viewNum?: Int;
  favoriteUser?: UserUpdateManyWithoutFavoriteInput;
}

export interface ProjectUpdateManyWithoutAddByInput {
  create?: ProjectCreateWithoutAddByInput[] | ProjectCreateWithoutAddByInput;
  delete?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  set?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  disconnect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
  update?:
    | ProjectUpdateWithWhereUniqueWithoutAddByInput[]
    | ProjectUpdateWithWhereUniqueWithoutAddByInput;
  upsert?:
    | ProjectUpsertWithWhereUniqueWithoutAddByInput[]
    | ProjectUpsertWithWhereUniqueWithoutAddByInput;
  deleteMany?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
  updateMany?:
    | ProjectUpdateManyWithWhereNestedInput[]
    | ProjectUpdateManyWithWhereNestedInput;
}

export interface UserUpdateManyWithoutMemberProjectsInput {
  create?:
    | UserCreateWithoutMemberProjectsInput[]
    | UserCreateWithoutMemberProjectsInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutMemberProjectsInput[]
    | UserUpdateWithWhereUniqueWithoutMemberProjectsInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutMemberProjectsInput[]
    | UserUpsertWithWhereUniqueWithoutMemberProjectsInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface ProjectWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  addBy?: UserWhereInput;
  updateAt?: DateTimeInput;
  updateAt_not?: DateTimeInput;
  updateAt_in?: DateTimeInput[] | DateTimeInput;
  updateAt_not_in?: DateTimeInput[] | DateTimeInput;
  updateAt_lt?: DateTimeInput;
  updateAt_lte?: DateTimeInput;
  updateAt_gt?: DateTimeInput;
  updateAt_gte?: DateTimeInput;
  tutor?: UserWhereInput;
  type?: Int;
  type_not?: Int;
  type_in?: Int[] | Int;
  type_not_in?: Int[] | Int;
  type_lt?: Int;
  type_lte?: Int;
  type_gt?: Int;
  type_gte?: Int;
  steps_every?: StepWhereInput;
  steps_some?: StepWhereInput;
  steps_none?: StepWhereInput;
  state?: Int;
  state_not?: Int;
  state_in?: Int[] | Int;
  state_not_in?: Int[] | Int;
  state_lt?: Int;
  state_lte?: Int;
  state_gt?: Int;
  state_gte?: Int;
  member_every?: UserWhereInput;
  member_some?: UserWhereInput;
  member_none?: UserWhereInput;
  college?: Int;
  college_not?: Int;
  college_in?: Int[] | Int;
  college_not_in?: Int[] | Int;
  college_lt?: Int;
  college_lte?: Int;
  college_gt?: Int;
  college_gte?: Int;
  viewNum?: Int;
  viewNum_not?: Int;
  viewNum_in?: Int[] | Int;
  viewNum_not_in?: Int[] | Int;
  viewNum_lt?: Int;
  viewNum_lte?: Int;
  viewNum_gt?: Int;
  viewNum_gte?: Int;
  favoriteUser_every?: UserWhereInput;
  favoriteUser_some?: UserWhereInput;
  favoriteUser_none?: UserWhereInput;
  AND?: ProjectWhereInput[] | ProjectWhereInput;
  OR?: ProjectWhereInput[] | ProjectWhereInput;
  NOT?: ProjectWhereInput[] | ProjectWhereInput;
}

export interface UserUpdateWithWhereUniqueWithoutMemberProjectsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutMemberProjectsDataInput;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MessageWhereInput;
  AND?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  OR?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
  NOT?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput;
}

export interface UserUpdateWithoutMemberProjectsDataInput {
  name?: String;
  idNumber?: String;
  password?: String;
  addByProjects?: ProjectUpdateManyWithoutAddByInput;
  type?: Int;
  favorite?: ProjectUpdateManyWithoutFavoriteUserInput;
  message?: MessageUpdateManyWithoutAddByInput;
  follow?: UserUpdateManyInput;
  class?: String;
  tutorProjects?: ProjectUpdateManyWithoutTutorInput;
  unreadMessage?: MessageUpdateManyWithoutUnreadInput;
  readMessage?: MessageUpdateManyWithoutReadInput;
}

export interface StepUpdateInput {
  name?: String;
  finishTime?: DateTimeInput;
  updateAt?: DateTimeInput;
  charge?: UserUpdateOneInput;
  state?: Int;
}

export interface MessageUpdateManyWithoutUnreadInput {
  create?: MessageCreateWithoutUnreadInput[] | MessageCreateWithoutUnreadInput;
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  set?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  update?:
    | MessageUpdateWithWhereUniqueWithoutUnreadInput[]
    | MessageUpdateWithWhereUniqueWithoutUnreadInput;
  upsert?:
    | MessageUpsertWithWhereUniqueWithoutUnreadInput[]
    | MessageUpsertWithWhereUniqueWithoutUnreadInput;
  deleteMany?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  updateMany?:
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput;
}

export interface ProjectCreateInput {
  description: String;
  name: String;
  addBy?: UserCreateOneWithoutAddByProjectsInput;
  updateAt?: DateTimeInput;
  tutor?: UserCreateOneWithoutTutorProjectsInput;
  type?: Int;
  steps?: StepCreateManyInput;
  state?: Int;
  member?: UserCreateManyWithoutMemberProjectsInput;
  college?: Int;
  viewNum?: Int;
  favoriteUser?: UserCreateManyWithoutFavoriteInput;
}

export interface MessageUpdateWithWhereUniqueWithoutUnreadInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutUnreadDataInput;
}

export interface ProjectUpsertWithWhereUniqueWithoutAddByInput {
  where: ProjectWhereUniqueInput;
  update: ProjectUpdateWithoutAddByDataInput;
  create: ProjectCreateWithoutAddByInput;
}

export interface MessageUpdateWithoutUnreadDataInput {
  addBy?: UserUpdateOneRequiredWithoutMessageInput;
  article?: String;
  read?: UserUpdateManyWithoutReadMessageInput;
}

export interface UserUpsertWithoutAddByProjectsInput {
  update: UserUpdateWithoutAddByProjectsDataInput;
  create: UserCreateWithoutAddByProjectsInput;
}

export interface UserUpdateManyWithoutReadMessageInput {
  create?:
    | UserCreateWithoutReadMessageInput[]
    | UserCreateWithoutReadMessageInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutReadMessageInput[]
    | UserUpdateWithWhereUniqueWithoutReadMessageInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutReadMessageInput[]
    | UserUpsertWithWhereUniqueWithoutReadMessageInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface UserCreateWithoutMessageInput {
  name: String;
  idNumber: String;
  password: String;
  addByProjects?: ProjectCreateManyWithoutAddByInput;
  memberProjects?: ProjectCreateManyWithoutMemberInput;
  type?: Int;
  favorite?: ProjectCreateManyWithoutFavoriteUserInput;
  follow?: UserCreateManyInput;
  class?: String;
  tutorProjects?: ProjectCreateManyWithoutTutorInput;
  unreadMessage?: MessageCreateManyWithoutUnreadInput;
  readMessage?: MessageCreateManyWithoutReadInput;
}

export interface UserUpdateWithWhereUniqueWithoutReadMessageInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutReadMessageDataInput;
}

export interface UserCreateWithoutTutorProjectsInput {
  name: String;
  idNumber: String;
  password: String;
  addByProjects?: ProjectCreateManyWithoutAddByInput;
  memberProjects?: ProjectCreateManyWithoutMemberInput;
  type?: Int;
  favorite?: ProjectCreateManyWithoutFavoriteUserInput;
  message?: MessageCreateManyWithoutAddByInput;
  follow?: UserCreateManyInput;
  class?: String;
  unreadMessage?: MessageCreateManyWithoutUnreadInput;
  readMessage?: MessageCreateManyWithoutReadInput;
}

export interface UserUpdateWithoutReadMessageDataInput {
  name?: String;
  idNumber?: String;
  password?: String;
  addByProjects?: ProjectUpdateManyWithoutAddByInput;
  memberProjects?: ProjectUpdateManyWithoutMemberInput;
  type?: Int;
  favorite?: ProjectUpdateManyWithoutFavoriteUserInput;
  message?: MessageUpdateManyWithoutAddByInput;
  follow?: UserUpdateManyInput;
  class?: String;
  tutorProjects?: ProjectUpdateManyWithoutTutorInput;
  unreadMessage?: MessageUpdateManyWithoutUnreadInput;
}

export interface UserCreateWithoutAddByProjectsInput {
  name: String;
  idNumber: String;
  password: String;
  memberProjects?: ProjectCreateManyWithoutMemberInput;
  type?: Int;
  favorite?: ProjectCreateManyWithoutFavoriteUserInput;
  message?: MessageCreateManyWithoutAddByInput;
  follow?: UserCreateManyInput;
  class?: String;
  tutorProjects?: ProjectCreateManyWithoutTutorInput;
  unreadMessage?: MessageCreateManyWithoutUnreadInput;
  readMessage?: MessageCreateManyWithoutReadInput;
}

export interface UserUpsertWithWhereUniqueWithoutReadMessageInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutReadMessageDataInput;
  create: UserCreateWithoutReadMessageInput;
}

export interface StepCreateInput {
  name: String;
  finishTime: DateTimeInput;
  updateAt?: DateTimeInput;
  charge?: UserCreateOneInput;
  state?: Int;
}

export interface MessageUpsertWithWhereUniqueWithoutUnreadInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutUnreadDataInput;
  create: MessageCreateWithoutUnreadInput;
}

export interface MessageCreateWithoutAddByInput {
  article?: String;
  unread?: UserCreateManyWithoutUnreadMessageInput;
  read?: UserCreateManyWithoutReadMessageInput;
}

export interface MessageScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  article?: String;
  article_not?: String;
  article_in?: String[] | String;
  article_not_in?: String[] | String;
  article_lt?: String;
  article_lte?: String;
  article_gt?: String;
  article_gte?: String;
  article_contains?: String;
  article_not_contains?: String;
  article_starts_with?: String;
  article_not_starts_with?: String;
  article_ends_with?: String;
  article_not_ends_with?: String;
  AND?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  OR?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  NOT?: MessageScalarWhereInput[] | MessageScalarWhereInput;
}

export interface ProjectCreateManyWithoutTutorInput {
  create?: ProjectCreateWithoutTutorInput[] | ProjectCreateWithoutTutorInput;
  connect?: ProjectWhereUniqueInput[] | ProjectWhereUniqueInput;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageCreateManyWithoutUnreadInput {
  create?: MessageCreateWithoutUnreadInput[] | MessageCreateWithoutUnreadInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
}

export interface MessageUpdateManyDataInput {
  article?: String;
}

export interface MessageCreateManyWithoutReadInput {
  create?: MessageCreateWithoutReadInput[] | MessageCreateWithoutReadInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
}

export interface MessageUpdateManyWithoutReadInput {
  create?: MessageCreateWithoutReadInput[] | MessageCreateWithoutReadInput;
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  set?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput;
  update?:
    | MessageUpdateWithWhereUniqueWithoutReadInput[]
    | MessageUpdateWithWhereUniqueWithoutReadInput;
  upsert?:
    | MessageUpsertWithWhereUniqueWithoutReadInput[]
    | MessageUpsertWithWhereUniqueWithoutReadInput;
  deleteMany?: MessageScalarWhereInput[] | MessageScalarWhereInput;
  updateMany?:
    | MessageUpdateManyWithWhereNestedInput[]
    | MessageUpdateManyWithWhereNestedInput;
}

export interface MessageUpdateInput {
  addBy?: UserUpdateOneRequiredWithoutMessageInput;
  article?: String;
  unread?: UserUpdateManyWithoutUnreadMessageInput;
  read?: UserUpdateManyWithoutReadMessageInput;
}

export interface MessageUpdateWithWhereUniqueWithoutReadInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutReadDataInput;
}

export interface ProjectUpdateWithWhereUniqueWithoutAddByInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutAddByDataInput;
}

export interface MessageUpdateWithoutReadDataInput {
  addBy?: UserUpdateOneRequiredWithoutMessageInput;
  article?: String;
  unread?: UserUpdateManyWithoutUnreadMessageInput;
}

export interface UserUpdateInput {
  name?: String;
  idNumber?: String;
  password?: String;
  addByProjects?: ProjectUpdateManyWithoutAddByInput;
  memberProjects?: ProjectUpdateManyWithoutMemberInput;
  type?: Int;
  favorite?: ProjectUpdateManyWithoutFavoriteUserInput;
  message?: MessageUpdateManyWithoutAddByInput;
  follow?: UserUpdateManyInput;
  class?: String;
  tutorProjects?: ProjectUpdateManyWithoutTutorInput;
  unreadMessage?: MessageUpdateManyWithoutUnreadInput;
  readMessage?: MessageUpdateManyWithoutReadInput;
}

export interface MessageUpsertWithWhereUniqueWithoutReadInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutReadDataInput;
  create: MessageCreateWithoutReadInput;
}

export interface MessageUpdateManyMutationInput {
  article?: String;
}

export interface UserUpsertWithWhereUniqueWithoutMemberProjectsInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutMemberProjectsDataInput;
  create: UserCreateWithoutMemberProjectsInput;
}

export interface MessageCreateInput {
  addBy: UserCreateOneWithoutMessageInput;
  article?: String;
  unread?: UserCreateManyWithoutUnreadMessageInput;
  read?: UserCreateManyWithoutReadMessageInput;
}

export interface UserUpdateManyWithoutFavoriteInput {
  create?: UserCreateWithoutFavoriteInput[] | UserCreateWithoutFavoriteInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutFavoriteInput[]
    | UserUpdateWithWhereUniqueWithoutFavoriteInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutFavoriteInput[]
    | UserUpsertWithWhereUniqueWithoutFavoriteInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface ProjectCreateWithoutMemberInput {
  description: String;
  name: String;
  addBy?: UserCreateOneWithoutAddByProjectsInput;
  updateAt?: DateTimeInput;
  tutor?: UserCreateOneWithoutTutorProjectsInput;
  type?: Int;
  steps?: StepCreateManyInput;
  state?: Int;
  college?: Int;
  viewNum?: Int;
  favoriteUser?: UserCreateManyWithoutFavoriteInput;
}

export interface UserUpdateWithWhereUniqueWithoutFavoriteInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutFavoriteDataInput;
}

export interface UserCreateInput {
  name: String;
  idNumber: String;
  password: String;
  addByProjects?: ProjectCreateManyWithoutAddByInput;
  memberProjects?: ProjectCreateManyWithoutMemberInput;
  type?: Int;
  favorite?: ProjectCreateManyWithoutFavoriteUserInput;
  message?: MessageCreateManyWithoutAddByInput;
  follow?: UserCreateManyInput;
  class?: String;
  tutorProjects?: ProjectCreateManyWithoutTutorInput;
  unreadMessage?: MessageCreateManyWithoutUnreadInput;
  readMessage?: MessageCreateManyWithoutReadInput;
}

export interface UserUpdateWithoutFavoriteDataInput {
  name?: String;
  idNumber?: String;
  password?: String;
  addByProjects?: ProjectUpdateManyWithoutAddByInput;
  memberProjects?: ProjectUpdateManyWithoutMemberInput;
  type?: Int;
  message?: MessageUpdateManyWithoutAddByInput;
  follow?: UserUpdateManyInput;
  class?: String;
  tutorProjects?: ProjectUpdateManyWithoutTutorInput;
  unreadMessage?: MessageUpdateManyWithoutUnreadInput;
  readMessage?: MessageUpdateManyWithoutReadInput;
}

export interface UserCreateManyWithoutMemberProjectsInput {
  create?:
    | UserCreateWithoutMemberProjectsInput[]
    | UserCreateWithoutMemberProjectsInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutFavoriteInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutFavoriteDataInput;
  create: UserCreateWithoutFavoriteInput;
}

export interface UserCreateManyWithoutFavoriteInput {
  create?: UserCreateWithoutFavoriteInput[] | UserCreateWithoutFavoriteInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface ProjectUpsertWithWhereUniqueWithoutTutorInput {
  where: ProjectWhereUniqueInput;
  update: ProjectUpdateWithoutTutorDataInput;
  create: ProjectCreateWithoutTutorInput;
}

export interface StepSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: StepWhereInput;
  AND?: StepSubscriptionWhereInput[] | StepSubscriptionWhereInput;
  OR?: StepSubscriptionWhereInput[] | StepSubscriptionWhereInput;
  NOT?: StepSubscriptionWhereInput[] | StepSubscriptionWhereInput;
}

export interface ProjectScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  updateAt?: DateTimeInput;
  updateAt_not?: DateTimeInput;
  updateAt_in?: DateTimeInput[] | DateTimeInput;
  updateAt_not_in?: DateTimeInput[] | DateTimeInput;
  updateAt_lt?: DateTimeInput;
  updateAt_lte?: DateTimeInput;
  updateAt_gt?: DateTimeInput;
  updateAt_gte?: DateTimeInput;
  type?: Int;
  type_not?: Int;
  type_in?: Int[] | Int;
  type_not_in?: Int[] | Int;
  type_lt?: Int;
  type_lte?: Int;
  type_gt?: Int;
  type_gte?: Int;
  state?: Int;
  state_not?: Int;
  state_in?: Int[] | Int;
  state_not_in?: Int[] | Int;
  state_lt?: Int;
  state_lte?: Int;
  state_gt?: Int;
  state_gte?: Int;
  college?: Int;
  college_not?: Int;
  college_in?: Int[] | Int;
  college_not_in?: Int[] | Int;
  college_lt?: Int;
  college_lte?: Int;
  college_gt?: Int;
  college_gte?: Int;
  viewNum?: Int;
  viewNum_not?: Int;
  viewNum_in?: Int[] | Int;
  viewNum_not_in?: Int[] | Int;
  viewNum_lt?: Int;
  viewNum_lte?: Int;
  viewNum_gt?: Int;
  viewNum_gte?: Int;
  AND?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
  OR?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
  NOT?: ProjectScalarWhereInput[] | ProjectScalarWhereInput;
}

export interface UserUpsertWithoutTutorProjectsInput {
  update: UserUpdateWithoutTutorProjectsDataInput;
  create: UserCreateWithoutTutorProjectsInput;
}

export interface ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput;
  data: ProjectUpdateManyDataInput;
}

export interface ProjectCreateWithoutFavoriteUserInput {
  description: String;
  name: String;
  addBy?: UserCreateOneWithoutAddByProjectsInput;
  updateAt?: DateTimeInput;
  tutor?: UserCreateOneWithoutTutorProjectsInput;
  type?: Int;
  steps?: StepCreateManyInput;
  state?: Int;
  member?: UserCreateManyWithoutMemberProjectsInput;
  college?: Int;
  viewNum?: Int;
}

export interface ProjectUpdateManyDataInput {
  description?: String;
  name?: String;
  updateAt?: DateTimeInput;
  type?: Int;
  state?: Int;
  college?: Int;
  viewNum?: Int;
}

export interface UserCreateManyWithoutReadMessageInput {
  create?:
    | UserCreateWithoutReadMessageInput[]
    | UserCreateWithoutReadMessageInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface StepUpsertWithWhereUniqueNestedInput {
  where: StepWhereUniqueInput;
  update: StepUpdateDataInput;
  create: StepCreateInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface MessageUpsertWithWhereUniqueWithoutAddByInput {
  where: MessageWhereUniqueInput;
  update: MessageUpdateWithoutAddByDataInput;
  create: MessageCreateWithoutAddByInput;
}

export interface UserUpsertWithWhereUniqueWithoutUnreadMessageInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutUnreadMessageDataInput;
  create: UserCreateWithoutUnreadMessageInput;
}

export interface UserUpdateWithoutMessageDataInput {
  name?: String;
  idNumber?: String;
  password?: String;
  addByProjects?: ProjectUpdateManyWithoutAddByInput;
  memberProjects?: ProjectUpdateManyWithoutMemberInput;
  type?: Int;
  favorite?: ProjectUpdateManyWithoutFavoriteUserInput;
  follow?: UserUpdateManyInput;
  class?: String;
  tutorProjects?: ProjectUpdateManyWithoutTutorInput;
  unreadMessage?: MessageUpdateManyWithoutUnreadInput;
  readMessage?: MessageUpdateManyWithoutReadInput;
}

export interface UserCreateWithoutUnreadMessageInput {
  name: String;
  idNumber: String;
  password: String;
  addByProjects?: ProjectCreateManyWithoutAddByInput;
  memberProjects?: ProjectCreateManyWithoutMemberInput;
  type?: Int;
  favorite?: ProjectCreateManyWithoutFavoriteUserInput;
  message?: MessageCreateManyWithoutAddByInput;
  follow?: UserCreateManyInput;
  class?: String;
  tutorProjects?: ProjectCreateManyWithoutTutorInput;
  readMessage?: MessageCreateManyWithoutReadInput;
}

export interface ProjectCreateWithoutAddByInput {
  description: String;
  name: String;
  updateAt?: DateTimeInput;
  tutor?: UserCreateOneWithoutTutorProjectsInput;
  type?: Int;
  steps?: StepCreateManyInput;
  state?: Int;
  member?: UserCreateManyWithoutMemberProjectsInput;
  college?: Int;
  viewNum?: Int;
  favoriteUser?: UserCreateManyWithoutFavoriteInput;
}

export interface ProjectUpdateManyMutationInput {
  description?: String;
  name?: String;
  updateAt?: DateTimeInput;
  type?: Int;
  state?: Int;
  college?: Int;
  viewNum?: Int;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  idNumber: String;
  password: String;
  type?: Int;
  class?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  idNumber: () => Promise<String>;
  password: () => Promise<String>;
  type: () => Promise<Int>;
  class: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  idNumber: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<Int>>;
  class: () => Promise<AsyncIterator<String>>;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Project {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  name: String;
  updateAt?: DateTimeOutput;
  type?: Int;
  state?: Int;
  college?: Int;
  viewNum?: Int;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  name: () => Promise<String>;
  addBy: <T = UserPromise>() => T;
  updateAt: () => Promise<DateTimeOutput>;
  tutor: <T = UserPromise>() => T;
  type: () => Promise<Int>;
  steps: <T = FragmentableArray<Step>>(
    args?: {
      where?: StepWhereInput;
      orderBy?: StepOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  state: () => Promise<Int>;
  member: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  college: () => Promise<Int>;
  viewNum: () => Promise<Int>;
  favoriteUser: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  addBy: <T = UserSubscription>() => T;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  tutor: <T = UserSubscription>() => T;
  type: () => Promise<AsyncIterator<Int>>;
  steps: <T = Promise<AsyncIterator<StepSubscription>>>(
    args?: {
      where?: StepWhereInput;
      orderBy?: StepOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  state: () => Promise<AsyncIterator<Int>>;
  member: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  college: () => Promise<AsyncIterator<Int>>;
  viewNum: () => Promise<AsyncIterator<Int>>;
  favoriteUser: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Step {
  id: ID_Output;
  name: String;
  finishTime: DateTimeOutput;
  updateAt?: DateTimeOutput;
  state?: Int;
}

export interface StepPromise extends Promise<Step>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  finishTime: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
  charge: <T = UserPromise>() => T;
  state: () => Promise<Int>;
}

export interface StepSubscription
  extends Promise<AsyncIterator<Step>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  finishTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  charge: <T = UserSubscription>() => T;
  state: () => Promise<AsyncIterator<Int>>;
}

export interface StepSubscriptionPayload {
  mutation: MutationType;
  node: Step;
  updatedFields: String[];
  previousValues: StepPreviousValues;
}

export interface StepSubscriptionPayloadPromise
  extends Promise<StepSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = StepPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = StepPreviousValuesPromise>() => T;
}

export interface StepSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<StepSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = StepSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = StepPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface StepEdge {
  node: Step;
  cursor: String;
}

export interface StepEdgePromise extends Promise<StepEdge>, Fragmentable {
  node: <T = StepPromise>() => T;
  cursor: () => Promise<String>;
}

export interface StepEdgeSubscription
  extends Promise<AsyncIterator<StepEdge>>,
    Fragmentable {
  node: <T = StepSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Message {
  id: ID_Output;
  createdAt: DateTimeOutput;
  article?: String;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  addBy: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  article: () => Promise<String>;
  unread: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  read: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  addBy: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  article: () => Promise<AsyncIterator<String>>;
  unread: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  read: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  article?: String;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  article: () => Promise<String>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  article: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface StepPreviousValues {
  id: ID_Output;
  name: String;
  finishTime: DateTimeOutput;
  updateAt?: DateTimeOutput;
  state?: Int;
}

export interface StepPreviousValuesPromise
  extends Promise<StepPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  finishTime: () => Promise<DateTimeOutput>;
  updateAt: () => Promise<DateTimeOutput>;
  state: () => Promise<Int>;
}

export interface StepPreviousValuesSubscription
  extends Promise<AsyncIterator<StepPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  finishTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  state: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  description: String;
  name: String;
  updateAt?: DateTimeOutput;
  type?: Int;
  state?: Int;
  college?: Int;
  viewNum?: Int;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  name: () => Promise<String>;
  updateAt: () => Promise<DateTimeOutput>;
  type: () => Promise<Int>;
  state: () => Promise<Int>;
  college: () => Promise<Int>;
  viewNum: () => Promise<Int>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  updateAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  type: () => Promise<AsyncIterator<Int>>;
  state: () => Promise<AsyncIterator<Int>>;
  college: () => Promise<AsyncIterator<Int>>;
  viewNum: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
  idNumber: String;
  password: String;
  type?: Int;
  class?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  idNumber: () => Promise<String>;
  password: () => Promise<String>;
  addByProjects: <T = FragmentableArray<Project>>(
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  memberProjects: <T = FragmentableArray<Project>>(
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  type: () => Promise<Int>;
  favorite: <T = FragmentableArray<Project>>(
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  message: <T = FragmentableArray<Message>>(
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  follow: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  class: () => Promise<String>;
  tutorProjects: <T = FragmentableArray<Project>>(
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  unreadMessage: <T = FragmentableArray<Message>>(
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  readMessage: <T = FragmentableArray<Message>>(
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  idNumber: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  addByProjects: <T = Promise<AsyncIterator<ProjectSubscription>>>(
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  memberProjects: <T = Promise<AsyncIterator<ProjectSubscription>>>(
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  type: () => Promise<AsyncIterator<Int>>;
  favorite: <T = Promise<AsyncIterator<ProjectSubscription>>>(
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  message: <T = Promise<AsyncIterator<MessageSubscription>>>(
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  follow: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  class: () => Promise<AsyncIterator<String>>;
  tutorProjects: <T = Promise<AsyncIterator<ProjectSubscription>>>(
    args?: {
      where?: ProjectWhereInput;
      orderBy?: ProjectOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  unreadMessage: <T = Promise<AsyncIterator<MessageSubscription>>>(
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  readMessage: <T = Promise<AsyncIterator<MessageSubscription>>>(
    args?: {
      where?: MessageWhereInput;
      orderBy?: MessageOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateStep {
  count: Int;
}

export interface AggregateStepPromise
  extends Promise<AggregateStep>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateStepSubscription
  extends Promise<AsyncIterator<AggregateStep>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface StepConnection {
  pageInfo: PageInfo;
  edges: StepEdge[];
}

export interface StepConnectionPromise
  extends Promise<StepConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<StepEdge>>() => T;
  aggregate: <T = AggregateStepPromise>() => T;
}

export interface StepConnectionSubscription
  extends Promise<AsyncIterator<StepConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<StepEdgeSubscription>>>() => T;
  aggregate: <T = AggregateStepSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Project",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Step",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
